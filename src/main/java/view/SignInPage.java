package view;

import model.User;
import util.DatabaseConnection;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Arrays;
import java.util.Locale;

public class SignInPage {
    private JFrame frame;
    private JLabel titleLabel;
    private JLabel subTitleLabel;
    private JButton signInButton;
    private JButton signUpButton;
    private JTextField emailTextField;
    private JLabel emailLabel;
    private JLabel passwordLabel;
    private JPasswordField passwordTextField;
    private JPanel signInPanel;

    public SignInPage() {
        $$$setupUI$$$();
        signUpButton.addActionListener(e -> signUpButtonActionPerformed());
        signInButton.addActionListener(e -> signInButtonActionPerformed());
    }


    public void launchFrame() {
        frame = new JFrame("SignInPage");
        frame.setContentPane(this.signInPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    private void signUpButtonActionPerformed() {
        RegisterUserPage registerPage = new RegisterUserPage();
        registerPage.launchFrame();
    }

    private void signInButtonActionPerformed() {
        String email = emailTextField.getText();
        String pwd = Arrays.toString(passwordTextField.getPassword());


        if (isLoginValid(email, pwd)) {
            frame.dispose();
            JFrame parentFrame = new JFrame();
            parentFrame.setLayout(new BorderLayout());
            parentFrame.getContentPane().add(BorderLayout.CENTER, new CardPanel(loadUserFromDatabase()));
            parentFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            parentFrame.setTitle("Safety Pro");
            parentFrame.pack();
            parentFrame.setLocationRelativeTo(null);
            parentFrame.setVisible(true);

        } else {
            JOptionPane.showMessageDialog(null, "Incorrect Login Credentials");
        }

    }

    private boolean isLoginValid(String email, String password) {
        try {
            PreparedStatement pst = DatabaseConnection.getConnection().prepareStatement("Select * from users where email = ? and password = ?");
            pst.setString(1, email);
            pst.setString(2, password);
            ResultSet rs = pst.executeQuery();
            return rs.next();

        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    private User loadUserFromDatabase() {
        User user = new User();
        try {
            PreparedStatement loginUser = DatabaseConnection.getConnection()
                    .prepareStatement("SELECT name, phoneNumber, masterCode, userId, email, address FROM users WHERE email = ?");
            loginUser.setString(1, emailTextField.getText());

            ResultSet rs = loginUser.executeQuery();
            while (rs.next()) {
                int userId = rs.getInt("userId");
                String firstName = rs.getString("name");
                String phoneNumber = rs.getString("phoneNumber");
                String masterCode = rs.getString("masterCode");
                System.out.println("master code: " + masterCode);
                String email = rs.getString("email");
                String address = rs.getString("address");

                user.setAddress(address);
                user.setName(firstName);
                user.setPhoneNumber(phoneNumber);
                user.setEmail(email);
                user.setMasterCode(masterCode);
                user.setUserID(userId);
            }

        } catch (Exception e) {
            System.out.println("Error in retrieving user details");
            e.printStackTrace();
        }
        return user;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        signInPanel = new JPanel();
        signInPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(6, 4, new Insets(0, 0, 0, 0), -1, -1));
        signInPanel.setBackground(new Color(-590337));
        signInPanel.setEnabled(false);
        signInPanel.setMinimumSize(new Dimension(400, 400));
        titleLabel = new JLabel();
        Font titleLabelFont = this.$$$getFont$$$("Monaco", Font.BOLD | Font.ITALIC, 18, titleLabel.getFont());
        if (titleLabelFont != null) titleLabel.setFont(titleLabelFont);
        titleLabel.setHorizontalAlignment(0);
        titleLabel.setHorizontalTextPosition(0);
        titleLabel.setText("SafetyPro");
        signInPanel.add(titleLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 4, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        subTitleLabel = new JLabel();
        Font subTitleLabelFont = this.$$$getFont$$$("Monaco", -1, 14, subTitleLabel.getFont());
        if (subTitleLabelFont != null) subTitleLabel.setFont(subTitleLabelFont);
        subTitleLabel.setHorizontalAlignment(0);
        subTitleLabel.setHorizontalTextPosition(0);
        subTitleLabel.setText("Fire and Security services");
        signInPanel.add(subTitleLabel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 4, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        signInButton = new JButton();
        signInButton.setText("Sign In");
        signInPanel.add(signInButton, new com.intellij.uiDesigner.core.GridConstraints(4, 2, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        signUpButton = new JButton();
        signUpButton.setText("Create Account");
        signInPanel.add(signUpButton, new com.intellij.uiDesigner.core.GridConstraints(5, 1, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        emailLabel = new JLabel();
        emailLabel.setText("Email id: ");
        signInPanel.add(emailLabel, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        emailTextField = new JTextField();
        signInPanel.add(emailTextField, new com.intellij.uiDesigner.core.GridConstraints(2, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(300, -1), null, 0, false));
        passwordLabel = new JLabel();
        passwordLabel.setText("Password:");
        signInPanel.add(passwordLabel, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        passwordTextField = new JPasswordField();
        signInPanel.add(passwordTextField, new com.intellij.uiDesigner.core.GridConstraints(3, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(300, -1), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return signInPanel;
    }


}
